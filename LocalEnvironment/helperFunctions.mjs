// An assemblage of functions that I'm either using in my scripts or that may be of particular use to simplify your code.
// These are not native functions of AI Dungeon, but can be 'safely' used in your code.
// For consistency, these are not imported/exported and you'll have to manually place them into your scripts as
// that's how it's done within the AI Dungeon scripting interface. You may opt to import/export it yourself, but that'll obviously
// cause errors when attempting to run it within AI Dungeon.

// history interactions, usually called with a negative value to get the latest information.
const getHistoryString = (turns) => history.slice(turns).map(element => element["text"]).join(' ') // Returns a single string of the text.
const getHistoryText = (turns) => history.slice(turns).map(element => element["text"]) // Returns an array of text.
const getInputType = (turns) => history.slice(turns).map(element => element["type"]) // Returns the action types of the previous turns in an array.

// World Entries related functions, pass it an indexed element from worldEntries. Value can be ignored.
const setAsFrontMemory = (entry, value = 0) => state.memory.frontMemory = `\n> ${entry["entry"]}`  // Set the entry as frontMemory.
const setAsAuthorsNote = (entry, value = 0) => state.memory.authorsNote = `${entry["entry"]}` // Set the entry as authorsNote
const setAsContext = (entry, value = 0) => state.memory.context = `${entry["entry"]}` // Set the entry as context, overrides memory; append memory as prefix or suffix to somewhat circumvent.
const setAsRevealed = (entry, value = 0) => entry.isNotHidden = true  // Reveals the entry,
const setAsAutoGenerated = (entry, value = 0) => entry.autoGenerated = true; // (Not tested) autoGenerated permits the auto-memory to manage the entry.
